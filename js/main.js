// Generated by CoffeeScript 1.4.0
(function() {
  var Player;

  Player = (function() {

    function Player($, player) {
      var honor;
      this.player = player;
      this.honorContainer = this.player.find(".honor");
      honor = parseInt(this.honorContainer.html(), 10);
      if (isNaN(honor)) {
        this.honor = 0;
      } else {
        this.honor = honor;
      }
      this.clan = this.player.find(".clan").html();
      this.controls = this.player.find(".controls");
      this.more = this.player.find(".more");
      this.less = this.player.find(".less");
      this.setEvents();
      this.updateHonorDisplay();
    }

    Player.prototype.setEvents = function() {
      var taped,
        _this = this;
      taped = true;
      this.controls.on("touchmove", function() {
        return taped = false;
      });
      this.controls.on("touchcancel", function() {
        return taped = false;
      });
      this.controls.on("touchleave", function() {
        return taped = false;
      });
      return this.controls.on("touchend", function(ev) {
        if (taped) {
          return _this.dispatchTap(ev);
        } else {
          return taped = true;
        }
      });
    };

    Player.prototype.dispatchTap = function(ev) {
      var action;
      ev.preventDefault();
      action = ev.toElement.className;
      if (action === "more") {
        return this.changeHonor(1);
      } else {
        return this.changeHonor(-1);
      }
    };

    Player.prototype.changeHonor = function(change) {
      this.honor += change;
      return this.updateHonorDisplay();
    };

    Player.prototype.updateHonorDisplay = function() {
      var _this = this;
      return this.honorContainer.html(function() {
        return _this.honor;
      });
    };

    return Player;

  })();

  (function($) {
    return $(".player").each(function() {
      return new Player($, $(this));
    });
  })(Zepto);

}).call(this);
